// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirportSClient is the client API for AirportS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirportSClient interface {
	Create(ctx context.Context, in *AirportI, opts ...grpc.CallOption) (*AirportMR, error)
	Update(ctx context.Context, in *AirportI, opts ...grpc.CallOption) (*AirportMR, error)
	Delete(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*StatusR, error)
	CodeM(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*AirportMR, error)
	CodeU(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*AirportUR, error)
	Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*AirportListR, error)
	Service(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*AirportListR, error)
}

type airportSClient struct {
	cc grpc.ClientConnInterface
}

func NewAirportSClient(cc grpc.ClientConnInterface) AirportSClient {
	return &airportSClient{cc}
}

func (c *airportSClient) Create(ctx context.Context, in *AirportI, opts ...grpc.CallOption) (*AirportMR, error) {
	out := new(AirportMR)
	err := c.cc.Invoke(ctx, "/api.AirportS/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) Update(ctx context.Context, in *AirportI, opts ...grpc.CallOption) (*AirportMR, error) {
	out := new(AirportMR)
	err := c.cc.Invoke(ctx, "/api.AirportS/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) Delete(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*StatusR, error) {
	out := new(StatusR)
	err := c.cc.Invoke(ctx, "/api.AirportS/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) CodeM(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*AirportMR, error) {
	out := new(AirportMR)
	err := c.cc.Invoke(ctx, "/api.AirportS/CodeM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) CodeU(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*AirportUR, error) {
	out := new(AirportUR)
	err := c.cc.Invoke(ctx, "/api.AirportS/CodeU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*AirportListR, error) {
	out := new(AirportListR)
	err := c.cc.Invoke(ctx, "/api.AirportS/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportSClient) Service(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*AirportListR, error) {
	out := new(AirportListR)
	err := c.cc.Invoke(ctx, "/api.AirportS/Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirportSServer is the server API for AirportS service.
// All implementations must embed UnimplementedAirportSServer
// for forward compatibility
type AirportSServer interface {
	Create(context.Context, *AirportI) (*AirportMR, error)
	Update(context.Context, *AirportI) (*AirportMR, error)
	Delete(context.Context, *GetByCodeI) (*StatusR, error)
	CodeM(context.Context, *GetByCodeI) (*AirportMR, error)
	CodeU(context.Context, *GetByCodeI) (*AirportUR, error)
	Search(context.Context, *SearchI) (*AirportListR, error)
	Service(context.Context, *GetByIdI) (*AirportListR, error)
	mustEmbedUnimplementedAirportSServer()
}

// UnimplementedAirportSServer must be embedded to have forward compatible implementations.
type UnimplementedAirportSServer struct {
}

func (UnimplementedAirportSServer) Create(context.Context, *AirportI) (*AirportMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAirportSServer) Update(context.Context, *AirportI) (*AirportMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAirportSServer) Delete(context.Context, *GetByCodeI) (*StatusR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAirportSServer) CodeM(context.Context, *GetByCodeI) (*AirportMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeM not implemented")
}
func (UnimplementedAirportSServer) CodeU(context.Context, *GetByCodeI) (*AirportUR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeU not implemented")
}
func (UnimplementedAirportSServer) Search(context.Context, *SearchI) (*AirportListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedAirportSServer) Service(context.Context, *GetByIdI) (*AirportListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service not implemented")
}
func (UnimplementedAirportSServer) mustEmbedUnimplementedAirportSServer() {}

// UnsafeAirportSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirportSServer will
// result in compilation errors.
type UnsafeAirportSServer interface {
	mustEmbedUnimplementedAirportSServer()
}

func RegisterAirportSServer(s grpc.ServiceRegistrar, srv AirportSServer) {
	s.RegisterService(&AirportS_ServiceDesc, srv)
}

func _AirportS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).Create(ctx, req.(*AirportI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).Update(ctx, req.(*AirportI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).Delete(ctx, req.(*GetByCodeI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_CodeM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).CodeM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/CodeM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).CodeM(ctx, req.(*GetByCodeI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_CodeU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).CodeU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/CodeU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).CodeU(ctx, req.(*GetByCodeI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).Search(ctx, req.(*SearchI))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportS_Service_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportSServer).Service(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AirportS/Service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportSServer).Service(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

// AirportS_ServiceDesc is the grpc.ServiceDesc for AirportS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirportS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AirportS",
	HandlerType: (*AirportSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AirportS_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AirportS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AirportS_Delete_Handler,
		},
		{
			MethodName: "CodeM",
			Handler:    _AirportS_CodeM_Handler,
		},
		{
			MethodName: "CodeU",
			Handler:    _AirportS_CodeU_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _AirportS_Search_Handler,
		},
		{
			MethodName: "Service",
			Handler:    _AirportS_Service_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airport.proto",
}
