// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagSClient is the client API for TagS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagSClient interface {
	Create(ctx context.Context, in *TagCreateI, opts ...grpc.CallOption) (*TagR, error)
	Update(ctx context.Context, in *TagUpdateI, opts ...grpc.CallOption) (*TagR, error)
	Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagR, error)
	Id(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagR, error)
	Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*TagListR, error)
	Service(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagListR, error)
}

type tagSClient struct {
	cc grpc.ClientConnInterface
}

func NewTagSClient(cc grpc.ClientConnInterface) TagSClient {
	return &tagSClient{cc}
}

func (c *tagSClient) Create(ctx context.Context, in *TagCreateI, opts ...grpc.CallOption) (*TagR, error) {
	out := new(TagR)
	err := c.cc.Invoke(ctx, "/api.TagS/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSClient) Update(ctx context.Context, in *TagUpdateI, opts ...grpc.CallOption) (*TagR, error) {
	out := new(TagR)
	err := c.cc.Invoke(ctx, "/api.TagS/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSClient) Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagR, error) {
	out := new(TagR)
	err := c.cc.Invoke(ctx, "/api.TagS/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSClient) Id(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagR, error) {
	out := new(TagR)
	err := c.cc.Invoke(ctx, "/api.TagS/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSClient) Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*TagListR, error) {
	out := new(TagListR)
	err := c.cc.Invoke(ctx, "/api.TagS/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagSClient) Service(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*TagListR, error) {
	out := new(TagListR)
	err := c.cc.Invoke(ctx, "/api.TagS/Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagSServer is the server API for TagS service.
// All implementations must embed UnimplementedTagSServer
// for forward compatibility
type TagSServer interface {
	Create(context.Context, *TagCreateI) (*TagR, error)
	Update(context.Context, *TagUpdateI) (*TagR, error)
	Delete(context.Context, *GetByIdI) (*TagR, error)
	Id(context.Context, *GetByIdI) (*TagR, error)
	Search(context.Context, *SearchI) (*TagListR, error)
	Service(context.Context, *GetByIdI) (*TagListR, error)
	mustEmbedUnimplementedTagSServer()
}

// UnimplementedTagSServer must be embedded to have forward compatible implementations.
type UnimplementedTagSServer struct {
}

func (UnimplementedTagSServer) Create(context.Context, *TagCreateI) (*TagR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTagSServer) Update(context.Context, *TagUpdateI) (*TagR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTagSServer) Delete(context.Context, *GetByIdI) (*TagR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagSServer) Id(context.Context, *GetByIdI) (*TagR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedTagSServer) Search(context.Context, *SearchI) (*TagListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTagSServer) Service(context.Context, *GetByIdI) (*TagListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service not implemented")
}
func (UnimplementedTagSServer) mustEmbedUnimplementedTagSServer() {}

// UnsafeTagSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagSServer will
// result in compilation errors.
type UnsafeTagSServer interface {
	mustEmbedUnimplementedTagSServer()
}

func RegisterTagSServer(s grpc.ServiceRegistrar, srv TagSServer) {
	s.RegisterService(&TagS_ServiceDesc, srv)
}

func _TagS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagCreateI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Create(ctx, req.(*TagCreateI))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagUpdateI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Update(ctx, req.(*TagUpdateI))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Delete(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagS_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Id(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Search(ctx, req.(*SearchI))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagS_Service_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagSServer).Service(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TagS/Service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagSServer).Service(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

// TagS_ServiceDesc is the grpc.ServiceDesc for TagS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TagS",
	HandlerType: (*TagSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TagS_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TagS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TagS_Delete_Handler,
		},
		{
			MethodName: "Id",
			Handler:    _TagS_Id_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _TagS_Search_Handler,
		},
		{
			MethodName: "Service",
			Handler:    _TagS_Service_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
