// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceSClient is the client API for ServiceS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceSClient interface {
	Create(ctx context.Context, in *ServiceCreateI, opts ...grpc.CallOption) (*ServiceMR, error)
	Update(ctx context.Context, in *ServiceUpdateI, opts ...grpc.CallOption) (*ServiceMR, error)
	Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*StatusR, error)
	IdM(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*ServiceMR, error)
	IdU(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*ServiceUR, error)
	Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*ServiceListR, error)
	Airport(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*ServiceListR, error)
	SearchAirport(ctx context.Context, in *SearchWithCodeI, opts ...grpc.CallOption) (*ServiceListR, error)
}

type serviceSClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceSClient(cc grpc.ClientConnInterface) ServiceSClient {
	return &serviceSClient{cc}
}

func (c *serviceSClient) Create(ctx context.Context, in *ServiceCreateI, opts ...grpc.CallOption) (*ServiceMR, error) {
	out := new(ServiceMR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) Update(ctx context.Context, in *ServiceUpdateI, opts ...grpc.CallOption) (*ServiceMR, error) {
	out := new(ServiceMR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*StatusR, error) {
	out := new(StatusR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) IdM(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*ServiceMR, error) {
	out := new(ServiceMR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/IdM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) IdU(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*ServiceUR, error) {
	out := new(ServiceUR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/IdU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*ServiceListR, error) {
	out := new(ServiceListR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) Airport(ctx context.Context, in *GetByCodeI, opts ...grpc.CallOption) (*ServiceListR, error) {
	out := new(ServiceListR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/Airport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceSClient) SearchAirport(ctx context.Context, in *SearchWithCodeI, opts ...grpc.CallOption) (*ServiceListR, error) {
	out := new(ServiceListR)
	err := c.cc.Invoke(ctx, "/api.ServiceS/SearchAirport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceSServer is the server API for ServiceS service.
// All implementations must embed UnimplementedServiceSServer
// for forward compatibility
type ServiceSServer interface {
	Create(context.Context, *ServiceCreateI) (*ServiceMR, error)
	Update(context.Context, *ServiceUpdateI) (*ServiceMR, error)
	Delete(context.Context, *GetByIdI) (*StatusR, error)
	IdM(context.Context, *GetByIdI) (*ServiceMR, error)
	IdU(context.Context, *GetByIdI) (*ServiceUR, error)
	Search(context.Context, *SearchI) (*ServiceListR, error)
	Airport(context.Context, *GetByCodeI) (*ServiceListR, error)
	SearchAirport(context.Context, *SearchWithCodeI) (*ServiceListR, error)
	mustEmbedUnimplementedServiceSServer()
}

// UnimplementedServiceSServer must be embedded to have forward compatible implementations.
type UnimplementedServiceSServer struct {
}

func (UnimplementedServiceSServer) Create(context.Context, *ServiceCreateI) (*ServiceMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceSServer) Update(context.Context, *ServiceUpdateI) (*ServiceMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceSServer) Delete(context.Context, *GetByIdI) (*StatusR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceSServer) IdM(context.Context, *GetByIdI) (*ServiceMR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdM not implemented")
}
func (UnimplementedServiceSServer) IdU(context.Context, *GetByIdI) (*ServiceUR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdU not implemented")
}
func (UnimplementedServiceSServer) Search(context.Context, *SearchI) (*ServiceListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedServiceSServer) Airport(context.Context, *GetByCodeI) (*ServiceListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Airport not implemented")
}
func (UnimplementedServiceSServer) SearchAirport(context.Context, *SearchWithCodeI) (*ServiceListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAirport not implemented")
}
func (UnimplementedServiceSServer) mustEmbedUnimplementedServiceSServer() {}

// UnsafeServiceSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceSServer will
// result in compilation errors.
type UnsafeServiceSServer interface {
	mustEmbedUnimplementedServiceSServer()
}

func RegisterServiceSServer(s grpc.ServiceRegistrar, srv ServiceSServer) {
	s.RegisterService(&ServiceS_ServiceDesc, srv)
}

func _ServiceS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCreateI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).Create(ctx, req.(*ServiceCreateI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).Update(ctx, req.(*ServiceUpdateI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).Delete(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_IdM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).IdM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/IdM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).IdM(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_IdU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).IdU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/IdU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).IdU(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).Search(ctx, req.(*SearchI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_Airport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).Airport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/Airport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).Airport(ctx, req.(*GetByCodeI))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceS_SearchAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWithCodeI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceSServer).SearchAirport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceS/SearchAirport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceSServer).SearchAirport(ctx, req.(*SearchWithCodeI))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceS_ServiceDesc is the grpc.ServiceDesc for ServiceS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceS",
	HandlerType: (*ServiceSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceS_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceS_Delete_Handler,
		},
		{
			MethodName: "IdM",
			Handler:    _ServiceS_IdM_Handler,
		},
		{
			MethodName: "IdU",
			Handler:    _ServiceS_IdU_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ServiceS_Search_Handler,
		},
		{
			MethodName: "Airport",
			Handler:    _ServiceS_Airport_Handler,
		},
		{
			MethodName: "SearchAirport",
			Handler:    _ServiceS_SearchAirport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
