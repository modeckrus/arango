// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSClient is the client API for UserS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSClient interface {
	Create(ctx context.Context, in *CreateUserI, opts ...grpc.CallOption) (*UserR, error)
	Update(ctx context.Context, in *UpdateUserI, opts ...grpc.CallOption) (*UserR, error)
	Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*StatusR, error)
	Id(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*UserR, error)
	Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*UserListR, error)
	AuthByEmail(ctx context.Context, in *AuthByEmailI, opts ...grpc.CallOption) (*AuthI, error)
	Me(ctx context.Context, in *AuthI, opts ...grpc.CallOption) (*UserR, error)
}

type userSClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSClient(cc grpc.ClientConnInterface) UserSClient {
	return &userSClient{cc}
}

func (c *userSClient) Create(ctx context.Context, in *CreateUserI, opts ...grpc.CallOption) (*UserR, error) {
	out := new(UserR)
	err := c.cc.Invoke(ctx, "/api.UserS/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) Update(ctx context.Context, in *UpdateUserI, opts ...grpc.CallOption) (*UserR, error) {
	out := new(UserR)
	err := c.cc.Invoke(ctx, "/api.UserS/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) Delete(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*StatusR, error) {
	out := new(StatusR)
	err := c.cc.Invoke(ctx, "/api.UserS/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) Id(ctx context.Context, in *GetByIdI, opts ...grpc.CallOption) (*UserR, error) {
	out := new(UserR)
	err := c.cc.Invoke(ctx, "/api.UserS/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) Search(ctx context.Context, in *SearchI, opts ...grpc.CallOption) (*UserListR, error) {
	out := new(UserListR)
	err := c.cc.Invoke(ctx, "/api.UserS/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) AuthByEmail(ctx context.Context, in *AuthByEmailI, opts ...grpc.CallOption) (*AuthI, error) {
	out := new(AuthI)
	err := c.cc.Invoke(ctx, "/api.UserS/AuthByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSClient) Me(ctx context.Context, in *AuthI, opts ...grpc.CallOption) (*UserR, error) {
	out := new(UserR)
	err := c.cc.Invoke(ctx, "/api.UserS/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSServer is the server API for UserS service.
// All implementations must embed UnimplementedUserSServer
// for forward compatibility
type UserSServer interface {
	Create(context.Context, *CreateUserI) (*UserR, error)
	Update(context.Context, *UpdateUserI) (*UserR, error)
	Delete(context.Context, *GetByIdI) (*StatusR, error)
	Id(context.Context, *GetByIdI) (*UserR, error)
	Search(context.Context, *SearchI) (*UserListR, error)
	AuthByEmail(context.Context, *AuthByEmailI) (*AuthI, error)
	Me(context.Context, *AuthI) (*UserR, error)
	mustEmbedUnimplementedUserSServer()
}

// UnimplementedUserSServer must be embedded to have forward compatible implementations.
type UnimplementedUserSServer struct {
}

func (UnimplementedUserSServer) Create(context.Context, *CreateUserI) (*UserR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserSServer) Update(context.Context, *UpdateUserI) (*UserR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserSServer) Delete(context.Context, *GetByIdI) (*StatusR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserSServer) Id(context.Context, *GetByIdI) (*UserR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedUserSServer) Search(context.Context, *SearchI) (*UserListR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUserSServer) AuthByEmail(context.Context, *AuthByEmailI) (*AuthI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByEmail not implemented")
}
func (UnimplementedUserSServer) Me(context.Context, *AuthI) (*UserR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedUserSServer) mustEmbedUnimplementedUserSServer() {}

// UnsafeUserSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSServer will
// result in compilation errors.
type UnsafeUserSServer interface {
	mustEmbedUnimplementedUserSServer()
}

func RegisterUserSServer(s grpc.ServiceRegistrar, srv UserSServer) {
	s.RegisterService(&UserS_ServiceDesc, srv)
}

func _UserS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Create(ctx, req.(*CreateUserI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Update(ctx, req.(*UpdateUserI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Delete(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Id(ctx, req.(*GetByIdI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Search(ctx, req.(*SearchI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_AuthByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByEmailI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).AuthByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/AuthByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).AuthByEmail(ctx, req.(*AuthByEmailI))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserS_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthI)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserS/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSServer).Me(ctx, req.(*AuthI))
	}
	return interceptor(ctx, in, info, handler)
}

// UserS_ServiceDesc is the grpc.ServiceDesc for UserS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserS",
	HandlerType: (*UserSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserS_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserS_Delete_Handler,
		},
		{
			MethodName: "Id",
			Handler:    _UserS_Id_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _UserS_Search_Handler,
		},
		{
			MethodName: "AuthByEmail",
			Handler:    _UserS_AuthByEmail_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _UserS_Me_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
